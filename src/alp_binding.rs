#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.71.1 */

pub const ALP_DEFAULT: u32 = 0;
pub const ALP_ENABLE: u32 = 1;
pub const ALP_OK: u32 = 0;
pub const ALP_NOT_ONLINE: u32 = 1001;
pub const ALP_NOT_IDLE: u32 = 1002;
pub const ALP_NOT_AVAILABLE: u32 = 1003;
pub const ALP_NOT_READY: u32 = 1004;
pub const ALP_PARM_INVALID: u32 = 1005;
pub const ALP_ADDR_INVALID: u32 = 1006;
pub const ALP_MEMORY_FULL: u32 = 1007;
pub const ALP_SEQ_IN_USE: u32 = 1008;
pub const ALP_HALTED: u32 = 1009;
pub const ALP_ERROR_INIT: u32 = 1010;
pub const ALP_ERROR_COMM: u32 = 1011;
pub const ALP_DEVICE_REMOVED: u32 = 1012;
pub const ALP_NOT_CONFIGURED: u32 = 1013;
pub const ALP_LOADER_VERSION: u32 = 1014;
pub const ALP_ERROR_POWER_DOWN: u32 = 1018;
pub const ALP_DRIVER_VERSION: u32 = 1019;
pub const ALP_SDRAM_INIT: u32 = 1020;
pub const ALP_CONFIG_MISMATCH: u32 = 1021;
pub const ALP_ERROR_UNKNOWN: u32 = 1999;
pub const ALP_DEV_BUSY: u32 = 1100;
pub const ALP_DEV_READY: u32 = 1101;
pub const ALP_DEV_IDLE: u32 = 1102;
pub const ALP_PROJ_ACTIVE: u32 = 1200;
pub const ALP_PROJ_IDLE: u32 = 1201;
pub const ALP_DEVICE_NUMBER: u32 = 2000;
pub const ALP_VERSION: u32 = 2001;
pub const ALP_DEV_STATE: u32 = 2002;
pub const ALP_AVAIL_MEMORY: u32 = 2003;
pub const ALP_DDC_FPGA_TEMPERATURE: u32 = 2050;
pub const ALP_APPS_FPGA_TEMPERATURE: u32 = 2051;
pub const ALP_PCB_TEMPERATURE: u32 = 2052;
pub const ALP_MAX_DDC_FPGA_TEMPERATURE: u32 = 2145;
pub const ALP_MAX_APPS_FPGA_TEMPERATURE: u32 = 2146;
pub const ALP_MAX_PCB_TEMPERATURE: u32 = 2147;
pub const ALP_SYNCH_POLARITY: u32 = 2004;
pub const ALP_TRIGGER_EDGE: u32 = 2005;
pub const ALP_LEVEL_HIGH: u32 = 2006;
pub const ALP_LEVEL_LOW: u32 = 2007;
pub const ALP_EDGE_FALLING: u32 = 2008;
pub const ALP_EDGE_RISING: u32 = 2009;
pub const ALP_PWM_LEVEL: u32 = 2063;
pub const ALP_DEV_DYN_SYNCH_OUT_WATCHDOG: u32 = 2088;
pub const ALP_DEV_DYN_SYNCH_OUT1_GATE: u32 = 2023;
pub const ALP_DEV_DYN_SYNCH_OUT2_GATE: u32 = 2024;
pub const ALP_DEV_DYN_SYNCH_OUT3_GATE: u32 = 2025;
pub const ALP_USB_CONNECTION: u32 = 2016;
pub const ALP_USB_DISCONNECT_BEHAVIOUR: u32 = 2078;
pub const ALP_USB_IGNORE: u32 = 1;
pub const ALP_USB_RESET: u32 = 2;
pub const ALP_DEV_DMDTYPE: u32 = 2021;
pub const ALP_DMDTYPE_XGA: u32 = 1;
pub const ALP_DMDTYPE_SXGA_PLUS: u32 = 2;
pub const ALP_DMDTYPE_1080P_095A: u32 = 3;
pub const ALP_DMDTYPE_XGA_07A: u32 = 4;
pub const ALP_DMDTYPE_XGA_055A: u32 = 5;
pub const ALP_DMDTYPE_XGA_055X: u32 = 6;
pub const ALP_DMDTYPE_WUXGA_096A: u32 = 7;
pub const ALP_DMDTYPE_WQXGA_400MHZ_090A: u32 = 8;
pub const ALP_DMDTYPE_WQXGA_480MHZ_090A: u32 = 9;
pub const ALP_DMDTYPE_1080P_065A: u32 = 10;
pub const ALP_DMDTYPE_1080P_065_S600: u32 = 11;
pub const ALP_DMDTYPE_WXGA_S450: u32 = 12;
pub const ALP_DMDTYPE_DLPC910REV: u32 = 254;
pub const ALP_DMDTYPE_DISCONNECT: u32 = 255;
pub const ALP_DEV_DISPLAY_HEIGHT: u32 = 2057;
pub const ALP_DEV_DISPLAY_WIDTH: u32 = 2058;
pub const ALP_DEV_DMD_MODE: u32 = 2064;
pub const ALP_DMD_RESUME: u32 = 0;
pub const ALP_DMD_POWER_FLOAT: u32 = 1;
pub const ALP_DEV_GPIO5_PIN_MUX: u32 = 2062;
pub const ALP_GPIO_STATIC_LOW: u32 = 0;
pub const ALP_GPIO_STATIC_HIGH: u32 = 1;
pub const ALP_GPIO_DYN_SYNCH_OUT_ACTIVE_LOW: u32 = 16;
pub const ALP_GPIO_DYN_SYNCH_OUT_ACTIVE_HIGH: u32 = 17;
pub const ALP_SEQ_CONFIG: u32 = 2153;
pub const ALP_SEQ_CONFIG_DEFAULT: u32 = 0;
pub const ALP_SEQ_CONFIG_BITPLANE_LUT_ROW: u32 = 1;
pub const ALP_SEQ_REPEAT: u32 = 2100;
pub const ALP_FIRSTFRAME: u32 = 2101;
pub const ALP_LASTFRAME: u32 = 2102;
pub const ALP_BITNUM: u32 = 2103;
pub const ALP_BIN_MODE: u32 = 2104;
pub const ALP_BIN_NORMAL: u32 = 2105;
pub const ALP_BIN_UNINTERRUPTED: u32 = 2106;
pub const ALP_PWM_MODE: u32 = 2107;
pub const ALP_FLEX_PWM: u32 = 3;
pub const ALP_BITPLANE_LUT_MODE: u32 = 2107;
pub const ALP_BITPLANE_LUT_DEFAULT: u32 = 0;
pub const ALP_BITPLANE_LUT_FRAME: u32 = 6;
pub const ALP_BITPLANE_LUT_ROW: u32 = 7;
pub const ALP_BITPLANE_LUT_ENTRIES: u32 = 2108;
pub const ALP_DATA_FORMAT: u32 = 2110;
pub const ALP_DATA_MSB_ALIGN: u32 = 0;
pub const ALP_DATA_LSB_ALIGN: u32 = 1;
pub const ALP_DATA_BINARY_TOPDOWN: u32 = 2;
pub const ALP_DATA_BINARY_BOTTOMUP: u32 = 3;
pub const ALP_SEQ_PUT_LOCK: u32 = 2119;
pub const ALP_LINE_INC: u32 = 2113;
pub const ALP_FIRSTLINE: u32 = 2111;
pub const ALP_LASTLINE: u32 = 2112;
pub const ALP_SCROLL_FROM_ROW: u32 = 2123;
pub const ALP_SCROLL_TO_ROW: u32 = 2124;
pub const ALP_X_OFFSET: u32 = 2359;
pub const ALP_X_OFFSET_SELECT: u32 = 2154;
pub const ALP_X_OFFSET_GLOBAL: u32 = 0;
pub const ALP_X_OFFSET_SEQ: u32 = 1;
pub const ALP_FLUT_MODE: u32 = 2118;
pub const ALP_FLUT_NONE: u32 = 0;
pub const ALP_FLUT_9BIT: u32 = 1;
pub const ALP_FLUT_18BIT: u32 = 2;
pub const ALP_FLUT_ENTRIES9: u32 = 2120;
pub const ALP_FLUT_OFFSET9: u32 = 2122;
pub const ALP_SEQ_DMD_LINES: u32 = 2125;
pub const ALP_X_SHEAR_SELECT: u32 = 2132;
pub const ALP_DMD_MASK_SELECT: u32 = 2134;
pub const ALP_DMD_MASK_16X16: u32 = 1;
pub const ALP_DMD_MASK_16X8: u32 = 2;
pub const ALP_SEQ_DYN_SYNCH_OUT_PERIOD: u32 = 2150;
pub const ALP_SEQ_DYN_SYNCH_OUT_PULSEWIDTH: u32 = 2151;
pub const ALP_BITPLANES: u32 = 2200;
pub const ALP_PICNUM: u32 = 2201;
pub const ALP_PICTURE_TIME: u32 = 2203;
pub const ALP_ILLUMINATE_TIME: u32 = 2204;
pub const ALP_SYNCH_DELAY: u32 = 2205;
pub const ALP_SYNCH_PULSEWIDTH: u32 = 2206;
pub const ALP_TRIGGER_IN_DELAY: u32 = 2207;
pub const ALP_MAX_SYNCH_DELAY: u32 = 2209;
pub const ALP_MAX_TRIGGER_IN_DELAY: u32 = 2210;
pub const ALP_MIN_PICTURE_TIME: u32 = 2211;
pub const ALP_MIN_ILLUMINATE_TIME: u32 = 2212;
pub const ALP_MAX_PICTURE_TIME: u32 = 2213;
pub const ALP_ON_TIME: u32 = 2214;
pub const ALP_OFF_TIME: u32 = 2215;
pub const ALP_PUT_LINES: u32 = 1;
pub const ALP_PROJ_STATE: u32 = 2400;
pub const ALP_PROJ_ABORT_ASYNC: u32 = 2345;
pub const ALP_PROJ_WAIT_UNTIL: u32 = 2323;
pub const ALP_PROJ_WAIT_PIC_TIME: u32 = 0;
pub const ALP_PROJ_WAIT_ILLU_TIME: u32 = 1;
pub const ALP_PROJ_MODE: u32 = 2300;
pub const ALP_MASTER: u32 = 2301;
pub const ALP_SLAVE: u32 = 2302;
pub const ALP_PROJ_STEP: u32 = 2329;
pub const ALP_FLUT_MAX_ENTRIES9: u32 = 2324;
pub const ALP_FLUT_WRITE_9BIT: u32 = 2325;
pub const ALP_FLUT_WRITE_18BIT: u32 = 2326;
pub const ALP_PROJ_INVERSION: u32 = 2306;
pub const ALP_PROJ_UPSIDE_DOWN: u32 = 2307;
pub const ALP_PROJ_LEFT_RIGHT_FLIP: u32 = 2346;
pub const ALP_Y_OFFSET: u32 = 2360;
pub const ALP_X_SHEAR: u32 = 2337;
pub const ALP_DMD_MASK_WRITE_16K: u32 = 2351;
pub const ALP_DMD_MASK_WRITE: u32 = 2339;
pub const ALP_BPLUT_MAX_ENTRIES: u32 = 2356;
pub const ALP_BPLUT_WRITE: u32 = 2357;
pub const ALP_PROJ_QUEUE_MODE: u32 = 2314;
pub const ALP_PROJ_LEGACY: u32 = 0;
pub const ALP_PROJ_SEQUENCE_QUEUE: u32 = 1;
pub const ALP_PROJ_QUEUE_ID: u32 = 2315;
pub const ALP_PROJ_QUEUE_MAX_AVAIL: u32 = 2316;
pub const ALP_PROJ_QUEUE_AVAIL: u32 = 2317;
pub const ALP_PROJ_PROGRESS: u32 = 2318;
pub const ALP_PROJ_RESET_QUEUE: u32 = 2319;
pub const ALP_PROJ_ABORT_SEQUENCE: u32 = 2320;
pub const ALP_PROJ_ABORT_FRAME: u32 = 2321;
pub const ALP_FLAG_QUEUE_IDLE: u32 = 1;
pub const ALP_FLAG_SEQUENCE_ABORTING: u32 = 2;
pub const ALP_FLAG_SEQUENCE_INDEFINITE: u32 = 4;
pub const ALP_FLAG_FRAME_FINISHED: u32 = 8;
pub const ALP_FLAG_RSVD0: u32 = 16;
pub const ALP_HLD_PT120_RED: u32 = 257;
pub const ALP_HLD_PT120_RAX: u32 = 268;
pub const ALP_HLD_PT120_GREEN: u32 = 258;
pub const ALP_HLD_PT120_BLUE: u32 = 259;
pub const ALP_HLD_PT120TE_BLUE: u32 = 263;
pub const ALP_HLD_CBT90_UV: u32 = 265;
pub const ALP_HLD_CBT120_UV: u32 = 260;
pub const ALP_HLD_CBM120_UV365: u32 = 266;
pub const ALP_HLD_CBM120_UV: u32 = 267;
pub const ALP_HLD_CBM90X33_IRD: u32 = 270;
pub const ALP_HLD_CBM120_FR: u32 = 272;
pub const ALP_HLD_CBT90_WHITE: u32 = 262;
pub const ALP_HLD_CBT140_WHITE: u32 = 264;
pub const ALP_HLD_C_MULTI_405GR: u32 = 269;
pub const ALP_HLD_C_MULTI_RGB: u32 = 271;
pub const ALP_LED_SET_CURRENT: u32 = 1001;
pub const ALP_LED_BRIGHTNESS: u32 = 1002;
pub const ALP_LED_FORCE_OFF: u32 = 1003;
pub const ALP_LED_AUTO_OFF: u32 = 0;
pub const ALP_LED_OFF: u32 = 1;
pub const ALP_LED_ON: u32 = 2;
pub const ALP_LED_TYPE: u32 = 1101;
pub const ALP_LED_MEASURED_CURRENT: u32 = 1102;
pub const ALP_LED_TEMPERATURE_REF: u32 = 1103;
pub const ALP_LED_TEMPERATURE_JUNCTION: u32 = 1104;
pub const ALP_LED_ALLOC_PARAMS: u32 = 2101;
pub const ALP_DEV_DYN_TRIG_OUT1_GATE: u32 = 2023;
pub const ALP_DEV_DYN_TRIG_OUT2_GATE: u32 = 2024;
pub const ALP_DEV_DYN_TRIG_OUT3_GATE: u32 = 2025;
pub const ALP_TRIGGER_POLARITY: u32 = 2004;
pub const ALP_TRIGGER_DELAY: u32 = 2205;
pub const ALP_TRIGGER_PULSEWIDTH: u32 = 2206;
pub const ALP_MAX_TRIGGER_DELAY: u32 = 2209;
pub const ALP_VD_EDGE: u32 = 2005;
pub const ALP_VD_DELAY: u32 = 2207;
pub const ALP_MAX_VD_DELAY: u32 = 2210;
pub const ALP_SLAVE_VD: u32 = 2302;
pub const ALP_SEQ_REPETE: u32 = 2100;
pub type ALP_ID = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpDynSynchOutGate {
    pub Period: ::std::os::raw::c_uchar,
    pub Polarity: ::std::os::raw::c_uchar,
    pub Gate: [::std::os::raw::c_uchar; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpDynSynchOutGate"][::std::mem::size_of::<tAlpDynSynchOutGate>() - 18usize];
    ["Alignment of tAlpDynSynchOutGate"][::std::mem::align_of::<tAlpDynSynchOutGate>() - 1usize];
    ["Offset of field: tAlpDynSynchOutGate::Period"]
        [::std::mem::offset_of!(tAlpDynSynchOutGate, Period) - 0usize];
    ["Offset of field: tAlpDynSynchOutGate::Polarity"]
        [::std::mem::offset_of!(tAlpDynSynchOutGate, Polarity) - 1usize];
    ["Offset of field: tAlpDynSynchOutGate::Gate"]
        [::std::mem::offset_of!(tAlpDynSynchOutGate, Gate) - 2usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpLinePut {
    pub TransferMode: ::std::os::raw::c_long,
    pub PicOffset: ::std::os::raw::c_long,
    pub PicLoad: ::std::os::raw::c_long,
    pub LineOffset: ::std::os::raw::c_long,
    pub LineLoad: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpLinePut"][::std::mem::size_of::<tAlpLinePut>() - 20usize];
    ["Alignment of tAlpLinePut"][::std::mem::align_of::<tAlpLinePut>() - 1usize];
    ["Offset of field: tAlpLinePut::TransferMode"]
        [::std::mem::offset_of!(tAlpLinePut, TransferMode) - 0usize];
    ["Offset of field: tAlpLinePut::PicOffset"]
        [::std::mem::offset_of!(tAlpLinePut, PicOffset) - 4usize];
    ["Offset of field: tAlpLinePut::PicLoad"]
        [::std::mem::offset_of!(tAlpLinePut, PicLoad) - 8usize];
    ["Offset of field: tAlpLinePut::LineOffset"]
        [::std::mem::offset_of!(tAlpLinePut, LineOffset) - 12usize];
    ["Offset of field: tAlpLinePut::LineLoad"]
        [::std::mem::offset_of!(tAlpLinePut, LineLoad) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tFlutWrite {
    pub nOffset: ::std::os::raw::c_long,
    pub nSize: ::std::os::raw::c_long,
    pub FrameNumbers: [::std::os::raw::c_ulong; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tFlutWrite"][::std::mem::size_of::<tFlutWrite>() - 16392usize];
    ["Alignment of tFlutWrite"][::std::mem::align_of::<tFlutWrite>() - 1usize];
    ["Offset of field: tFlutWrite::nOffset"][::std::mem::offset_of!(tFlutWrite, nOffset) - 0usize];
    ["Offset of field: tFlutWrite::nSize"][::std::mem::offset_of!(tFlutWrite, nSize) - 4usize];
    ["Offset of field: tFlutWrite::FrameNumbers"]
        [::std::mem::offset_of!(tFlutWrite, FrameNumbers) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpShearTable {
    pub nOffset: ::std::os::raw::c_long,
    pub nSize: ::std::os::raw::c_long,
    pub nShiftDistance: [::std::os::raw::c_long; 8192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpShearTable"][::std::mem::size_of::<tAlpShearTable>() - 32776usize];
    ["Alignment of tAlpShearTable"][::std::mem::align_of::<tAlpShearTable>() - 1usize];
    ["Offset of field: tAlpShearTable::nOffset"]
        [::std::mem::offset_of!(tAlpShearTable, nOffset) - 0usize];
    ["Offset of field: tAlpShearTable::nSize"]
        [::std::mem::offset_of!(tAlpShearTable, nSize) - 4usize];
    ["Offset of field: tAlpShearTable::nShiftDistance"]
        [::std::mem::offset_of!(tAlpShearTable, nShiftDistance) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpDmdMask16K {
    pub nBlockWidth: ::std::os::raw::c_long,
    pub nRowOffset: ::std::os::raw::c_long,
    pub nRowCount: ::std::os::raw::c_long,
    pub Bitmap: [::std::os::raw::c_uchar; 16384usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpDmdMask16K"][::std::mem::size_of::<tAlpDmdMask16K>() - 16396usize];
    ["Alignment of tAlpDmdMask16K"][::std::mem::align_of::<tAlpDmdMask16K>() - 1usize];
    ["Offset of field: tAlpDmdMask16K::nBlockWidth"]
        [::std::mem::offset_of!(tAlpDmdMask16K, nBlockWidth) - 0usize];
    ["Offset of field: tAlpDmdMask16K::nRowOffset"]
        [::std::mem::offset_of!(tAlpDmdMask16K, nRowOffset) - 4usize];
    ["Offset of field: tAlpDmdMask16K::nRowCount"]
        [::std::mem::offset_of!(tAlpDmdMask16K, nRowCount) - 8usize];
    ["Offset of field: tAlpDmdMask16K::Bitmap"]
        [::std::mem::offset_of!(tAlpDmdMask16K, Bitmap) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpDmdMask {
    pub nRowOffset: ::std::os::raw::c_long,
    pub nRowCount: ::std::os::raw::c_long,
    pub Bitmap: [::std::os::raw::c_uchar; 2048usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpDmdMask"][::std::mem::size_of::<tAlpDmdMask>() - 2056usize];
    ["Alignment of tAlpDmdMask"][::std::mem::align_of::<tAlpDmdMask>() - 1usize];
    ["Offset of field: tAlpDmdMask::nRowOffset"]
        [::std::mem::offset_of!(tAlpDmdMask, nRowOffset) - 0usize];
    ["Offset of field: tAlpDmdMask::nRowCount"]
        [::std::mem::offset_of!(tAlpDmdMask, nRowCount) - 4usize];
    ["Offset of field: tAlpDmdMask::Bitmap"][::std::mem::offset_of!(tAlpDmdMask, Bitmap) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tBplutWrite {
    pub nOffset: ::std::os::raw::c_long,
    pub nSize: ::std::os::raw::c_long,
    pub BitPlanes: [::std::os::raw::c_ushort; 2048usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tBplutWrite"][::std::mem::size_of::<tBplutWrite>() - 4104usize];
    ["Alignment of tBplutWrite"][::std::mem::align_of::<tBplutWrite>() - 1usize];
    ["Offset of field: tBplutWrite::nOffset"]
        [::std::mem::offset_of!(tBplutWrite, nOffset) - 0usize];
    ["Offset of field: tBplutWrite::nSize"][::std::mem::offset_of!(tBplutWrite, nSize) - 4usize];
    ["Offset of field: tBplutWrite::BitPlanes"]
        [::std::mem::offset_of!(tBplutWrite, BitPlanes) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpProjProgress {
    pub CurrentQueueId: ALP_ID,
    pub SequenceId: ALP_ID,
    pub nWaitingSequences: ::std::os::raw::c_ulong,
    pub nSequenceCounter: ::std::os::raw::c_ulong,
    pub nSequenceCounterUnderflow: ::std::os::raw::c_ulong,
    pub nFrameCounter: ::std::os::raw::c_ulong,
    pub nPictureTime: ::std::os::raw::c_ulong,
    pub nFramesPerSubSequence: ::std::os::raw::c_ulong,
    pub nFlags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpProjProgress"][::std::mem::size_of::<tAlpProjProgress>() - 36usize];
    ["Alignment of tAlpProjProgress"][::std::mem::align_of::<tAlpProjProgress>() - 1usize];
    ["Offset of field: tAlpProjProgress::CurrentQueueId"]
        [::std::mem::offset_of!(tAlpProjProgress, CurrentQueueId) - 0usize];
    ["Offset of field: tAlpProjProgress::SequenceId"]
        [::std::mem::offset_of!(tAlpProjProgress, SequenceId) - 4usize];
    ["Offset of field: tAlpProjProgress::nWaitingSequences"]
        [::std::mem::offset_of!(tAlpProjProgress, nWaitingSequences) - 8usize];
    ["Offset of field: tAlpProjProgress::nSequenceCounter"]
        [::std::mem::offset_of!(tAlpProjProgress, nSequenceCounter) - 12usize];
    ["Offset of field: tAlpProjProgress::nSequenceCounterUnderflow"]
        [::std::mem::offset_of!(tAlpProjProgress, nSequenceCounterUnderflow) - 16usize];
    ["Offset of field: tAlpProjProgress::nFrameCounter"]
        [::std::mem::offset_of!(tAlpProjProgress, nFrameCounter) - 20usize];
    ["Offset of field: tAlpProjProgress::nPictureTime"]
        [::std::mem::offset_of!(tAlpProjProgress, nPictureTime) - 24usize];
    ["Offset of field: tAlpProjProgress::nFramesPerSubSequence"]
        [::std::mem::offset_of!(tAlpProjProgress, nFramesPerSubSequence) - 28usize];
    ["Offset of field: tAlpProjProgress::nFlags"]
        [::std::mem::offset_of!(tAlpProjProgress, nFlags) - 32usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tAlpHldAllocParams {
    pub I2cDacAddr: ::std::os::raw::c_long,
    pub I2cAdcAddr: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tAlpHldAllocParams"][::std::mem::size_of::<tAlpHldAllocParams>() - 8usize];
    ["Alignment of tAlpHldAllocParams"][::std::mem::align_of::<tAlpHldAllocParams>() - 1usize];
    ["Offset of field: tAlpHldAllocParams::I2cDacAddr"]
        [::std::mem::offset_of!(tAlpHldAllocParams, I2cDacAddr) - 0usize];
    ["Offset of field: tAlpHldAllocParams::I2cAdcAddr"]
        [::std::mem::offset_of!(tAlpHldAllocParams, I2cAdcAddr) - 4usize];
};
pub type tAlpDynTrigOutGate = tAlpDynSynchOutGate;
unsafe extern "C" {
    pub fn AlpDevAlloc(
        DeviceNum: ::std::os::raw::c_long,
        InitFlag: ::std::os::raw::c_long,
        DeviceIdPtr: *mut ALP_ID,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpDevHalt(DeviceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpDevFree(DeviceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpDevControl(
        DeviceId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        ControlValue: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpDevControlEx(
        DeviceId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        UserStructPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpDevInquire(
        DeviceId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserVarPtr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqAlloc(
        DeviceId: ALP_ID,
        BitPlanes: ::std::os::raw::c_long,
        PicNum: ::std::os::raw::c_long,
        SequenceIdPtr: *mut ALP_ID,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqFree(DeviceId: ALP_ID, SequenceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqControl(
        DeviceId: ALP_ID,
        SequenceId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        ControlValue: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqTiming(
        DeviceId: ALP_ID,
        SequenceId: ALP_ID,
        IlluminateTime: ::std::os::raw::c_long,
        PictureTime: ::std::os::raw::c_long,
        SynchDelay: ::std::os::raw::c_long,
        SynchPulseWidth: ::std::os::raw::c_long,
        TriggerInDelay: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqInquire(
        DeviceId: ALP_ID,
        SequenceId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserVarPtr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqPut(
        DeviceId: ALP_ID,
        SequenceId: ALP_ID,
        PicOffset: ::std::os::raw::c_long,
        PicLoad: ::std::os::raw::c_long,
        UserArrayPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpSeqPutEx(
        DeviceId: ALP_ID,
        SequenceId: ALP_ID,
        UserStructPtr: *mut ::std::os::raw::c_void,
        UserArrayPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjStart(DeviceId: ALP_ID, SequenceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjStartCont(DeviceId: ALP_ID, SequenceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjHalt(DeviceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjWait(DeviceId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjControl(
        DeviceId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        ControlValue: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjControlEx(
        DeviceId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        pUserStructPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjInquire(
        DeviceId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserVarPtr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpProjInquireEx(
        DeviceId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserStructPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedAlloc(
        DeviceId: ALP_ID,
        LedType: ::std::os::raw::c_long,
        UserStructPtr: *mut ::std::os::raw::c_void,
        LedId: *mut ALP_ID,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedFree(DeviceId: ALP_ID, LedId: ALP_ID) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedControl(
        DeviceId: ALP_ID,
        LedId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedControlEx(
        DeviceId: ALP_ID,
        LedId: ALP_ID,
        ControlType: ::std::os::raw::c_long,
        UserStructPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedInquire(
        DeviceId: ALP_ID,
        LedId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserVarPtr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AlpLedInquireEx(
        DeviceId: ALP_ID,
        LedId: ALP_ID,
        InquireType: ::std::os::raw::c_long,
        UserStructPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
